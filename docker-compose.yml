volumes:
  n8n_storage: 
  postgres_storage:
  ollama_storage:
  qdrant_storage:

networks:
  vn:
    driver: bridge
    ipam:
      config:
        - subnet: 178.1.1.0/24  # Define the subnet for the network

x-n8n: &service-n8n
  image: n8nio/n8n:latest
  networks:
    vn:
      ipv4_address: 178.1.1.100
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_USER=${POSTGRES_USER}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_ENCRYPTION_KEY
    - N8N_USER_MANAGEMENT_JWT_SECRET
  links:
    - postgres

x-ollama: &service-ollama
  image: ollama/ollama:latest
  container_name: ollama
  networks:
    vn:
      ipv4_address: 178.1.1.101
  restart: unless-stopped
  ports:
    - ${OLLAMA_PORT_HOST}:${OLLAMA_PORT_CONT}
  volumes:
    - ollama_storage:/root/.ollama

x-init-ollama: &init-ollama
  image: ollama/ollama:latest
  container_name: ollama-pull-llama
  networks:
    vn:
      ipv4_address: 178.1.1.102
  volumes:
    - ollama_storage:/root/.ollama
  entrypoint: /bin/sh
  command:
    - "-c"
    - "sleep 3; OLLAMA_HOST=ollama:${OLLAMA_PORT_CONT} ollama pull llama3.2; OLLAMA_HOST=ollama:${OLLAMA_PORT_CONT} ollama pull nomic-embed-text"

services:
  mariadb:
    container_name: mariadb
    image: mariadb:lts-ubi
    command:
      - --max_allowed_packet=107374182400  # 100GB
      - --max_connections=20000
      - --innodb_buffer_pool_size=256M
    networks:
      vn:
        ipv4_address: 178.1.1.110
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MARIADB_ROOT_PASSWORD}
      MARIADB_USER: ${MARIADB_USER}
      MARIADB_PASSWORD: ${MARIADB_PASSWORD}
    ports:
      - ${MARIADB_PORT_HOST}:${MARIADB_PORT_CONT}
    volumes:
      # bind-mount the sql files that should be run while initialising
      - ./init:/docker-entrypoint-initdb.d
    healthcheck:  # define health-check that service is ready
      interval: 2s
      retries: 20
      test:
        [
          "CMD",
          "healthcheck.sh",
          "--su-mysql",
          "--connect",
          "--innodb_initialized"
        ]
      timeout: 30s
  # administration
  adminer:
    container_name: adminer
    image: adminer:latest
    networks:
      vn:
        ipv4_address: 178.1.1.120
    environment:
      ADMINER_DEFAULT_SERVER: mariadb
    restart: always
    ports:
      - ${ADMINER_PORT_HOST}:${ADMINER_PORT_CONT}

  postgres:
    image: postgres:16-alpine
    networks:
      vn:
        ipv4_address: 178.1.1.111
    container_name: postgres
    restart: unless-stopped
    ports:
      - ${POSTGRES_PORT_HOST}:${POSTGRES_PORT_CONT}
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    volumes:
      - postgres_storage:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 10

  n8n-import:
    <<: *service-n8n
    container_name: n8n-import
    entrypoint: /bin/sh
    command:
      - "-c"
      - "n8n import:credentials --separate --input=/backup/credentials && n8n import:workflow --separate --input=/backup/workflows"
    volumes:
      - ./n8n/backup:/backup
    depends_on:
      postgres:
        condition: service_healthy

  n8n:
    <<: *service-n8n
    container_name: n8n
    restart: unless-stopped
    ports:
      - ${N8N_PORT_HOST}:${N8N_PORT_CONT}
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./n8n/backup:/backup
      #- ./data:/data/shared
      - ./data:/files
    depends_on:
      postgres:
        condition: service_healthy
      n8n-import:
        condition: service_completed_successfully

  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    networks:
      vn:
        ipv4_address: 178.1.1.112
    restart: unless-stopped
    ports:
      - ${QDRANT_PORT_HOST}:${QDRANT_PORT_CONT}
    volumes:
      - qdrant_storage:/qdrant/storage

  ollama-cpu:
    profiles: ["cpu"]
    <<: *service-ollama

  ollama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *service-ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  ollama-pull-llama-cpu:
    profiles: ["cpu"]
    <<: *init-ollama
    depends_on:
      - ollama-cpu

  ollama-pull-llama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *init-ollama
    depends_on:
      - ollama-gpu
